syntax = "proto3";

package responsive.controller.v1.controller.proto;

// TODO(rohan): clean up the submodule now that we are getting via maven central
import "opentelemetry/proto/metrics/v1/metrics.proto";

// TODO(rohan): consider versioning these APIs

service Controller {
  rpc PostMetrics(PostMetricsRequest) returns (SimpleResponse) {}
  rpc UpsertPolicy(UpsertPolicyRequest) returns (SimpleResponse) {}
  rpc CurrentState(CurrentStateRequest) returns (SimpleResponse) {}
  rpc GetTargetState(EmptyRequest) returns (GetTargetStateResponse) {}
  rpc CreateAction(CreateActionRequest) returns (CreateActionResponse) {}
  rpc GetActionStatus(GetActionStatusRequest) returns (GetActionStatusResponse) {}
  rpc GetCurrentActions(EmptyRequest) returns (GetCurrentActionsResponse) {}
  rpc UpdateActionStatus(UpdateActionStatusRequest) returns (SimpleResponse)  {}
  rpc ListApplications(EmptyUnspecificRequest) returns (ListApplicationsResponse) {}
}

message PostMetricsRequest {
  string application_id = 1;
  opentelemetry.proto.metrics.v1.MetricsData metrics = 2;
}

message ListApplicationsResponse {
  repeated string application_id = 1;
}

// TODO(rohan): we need to encode some ordering info (generation/version for policy, timestmap for current state)
// todo: consider setting message fields to optional so server can validate they are set
message UpsertPolicyRequest {
  string application_id = 1;
  int64 timestamp_ms = 2;
  ApplicationPolicySpec policy = 3;
}

message CurrentStateRequest {
  string application_id = 1;
  int64 timestamp_ms = 2;
  ApplicationState state = 3;
}

message EmptyRequest {
  string application_id = 1;
}

message EmptyUnspecificRequest {
}

message SimpleResponse {
  // todo: clean me up
  string error = 1;
}

message GetTargetStateResponse {
  // todo: clean me up
  string error = 1;
  ApplicationState state = 2;
  int64 last_eval_time_ms = 3;
}

message CreateActionRequest {
  string application_id = 1;
  Action action = 2;
}

message CreateActionResponse {
  Action action = 1;
}

message GetActionStatusRequest {
  string application_id = 1;
  string action_id = 2;
}

message GetActionStatusResponse {
  ActionStatus status = 1;
}

message GetCurrentActionsResponse {
  repeated Action actions = 1;
  int64 last_eval_time_ms = 2;
}

message UpdateActionStatusRequest {
  string application_id = 1;
  string action_id = 2;
  ActionStatus status = 3;
}

message ActionStatus {
  enum Status {
    COMPLETED = 0;
    FAILED = 1;
    PENDING = 2;
  }
  Status status = 1;
  string details = 2;
}

message Action {
  string id = 1;

  message ScaleApplication {
    uint32 replicas = 1;
  }

  message RestartPod {
    string pod_id = 1;
  }

  oneof action {
    ScaleApplication scale_application = 2;
    RestartPod restart_pod = 3;
  }
}

// TODO(rohan): move these to a common proto file. this file is just the grpc api
message ApplicationState {
  oneof state {
    KafkaStreamsApplicationState kafka_streams_state = 1;
  }
}

message KafkaStreamsApplicationState {
  int32 replicas = 1;
}

// from the protobuf best practices: All enum values declared under a
// container message are in the same C++ namespace, so prefix the unspecified
// value with the enumâ€™s name to avoid compilation errors.
//
// it seems like generally good practice to prefix all enums with their
// enum name
enum PolicyStatus {
  POLICY_STATUS_UNSPECIFIED = 0;
  POLICY_STATUS_MANAGED = 1;
  POLICY_STATUS_DISABLED = 2;
}

// TODO(rohan): move this to a a common location where we specify the policy
//              also, see if we can combine with the CRD somehow
message ApplicationPolicySpec {
  PolicyStatus status = 1;
  oneof policy {
    KafkaStreamsPolicySpec kafka_streams_policy = 2;
  }
}

message PolicyCooldownSpec {
  optional int32 state_transition_cooldown_seconds = 1;
  optional int32 rebalance_cooldown_seconds = 2;
}

message KafkaStreamsPolicySpec {
  message FixedReplicaScaleUpStrategySpec {
    // should this be a higher-level object?
    int32 replicas = 1;
  }

  message RateBasedScaleUpStrategySpec {
    int32 max_scale_replicas = 1;
  }

  message ScaleToMaxStrategySpec {
  }

  message RateBasedDiagnoserSpec {
    int32 rate = 1;
    optional int32 window_ms = 2;
  }

  message LagDiagnoserSpec {
  }

  message ExpectedLatencyDiagnoserSpec {
    int32 max_expected_latency_seconds = 1;
    optional int32 window_seconds = 7;
    optional int32 projection_seconds = 8;
    optional int32 scale_down_buffer_seconds = 9;
    optional int32 grace_seconds = 10;
    optional int32 stagger_seconds = 11;

    oneof scale_up_strategy {
      FixedReplicaScaleUpStrategySpec fixed_replicas = 2;
      RateBasedScaleUpStrategySpec rate_based = 3;
      ScaleToMaxStrategySpec scale_to_max = 4;
    }
  }

  message ThreadSaturationDiagnoserSpec {
    double threshold = 1;
    optional int32 window_seconds = 2;
    optional int32 num_windows = 3;
    optional int32 grace_seconds = 4;
    repeated string blocked_metric = 5;
  }

  message DiagnoserSpec {
    oneof diagnoser {
      RateBasedDiagnoserSpec processing_rate_scale_up = 1;
      RateBasedDiagnoserSpec processing_rate_scale_down = 2;
      RateBasedDiagnoserSpec arrival_rate_scale_up = 6;
      LagDiagnoserSpec lag_scale_up = 3;
      ExpectedLatencyDiagnoserSpec expected_latency = 4;
      ThreadSaturationDiagnoserSpec thread_saturation = 5;
    }
  }

  // Constraints
  int32 max_replicas = 1;
  int32 min_replicas = 2;
  int32 max_scale_up_replicas = 4;

  // Diagnosers
  repeated DiagnoserSpec diagnoser = 3;

  optional PolicyCooldownSpec cooldown = 5;
}